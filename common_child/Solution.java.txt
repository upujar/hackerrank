import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the commonChild function below.
    static int commonChild(String s1, String s2) {
  int L[][] = new int[s1.length()+1][s2.length()+1];

    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
         that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (int i=0; i<=s2.length(); i++)
    {
      for (int j=0; j<=s1.length(); j++)
      {
        if (i == 0 || j == 0)
          L[i][j] = 0;
        else if (s1.charAt(i-1) == s2.charAt(j-1))
          L[i][j] = L[i-1][j-1] + 1;
        else
          L[i][j] = Math.max(L[i-1][j], L[i][j-1]);
      }
    }
    return L[s1.length()][s2.length()];
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s1 = scanner.nextLine();

        String s2 = scanner.nextLine();

        int result = commonChild(s1, s2);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
